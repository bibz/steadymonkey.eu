<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Steady Monkey]]></title><description><![CDATA[Whatever thoughts out of Borjan's head.]]></description><link>https://steadymonkey.eu/</link><image><url>https://steadymonkey.eu/favicon.png</url><title>Steady Monkey</title><link>https://steadymonkey.eu/</link></image><generator>Ghost 4.48</generator><lastBuildDate>Fri, 26 Apr 2024 13:26:52 GMT</lastBuildDate><atom:link href="https://steadymonkey.eu/rss.xml" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[How I successfully used an LLM, or my Simon Willison moment]]></title><description><![CDATA[I'd like computers to help me more with some tasks I'd rather not do, so I tried something today: I instructed an LLM to draft paragraphs for an upcoming conference presentation. It worked]]></description><link>https://steadymonkey.eu/how-i-successfully-used-an-llm/</link><guid isPermaLink="false">662a97034204a7000192dbc6</guid><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Fri, 26 Apr 2024 13:26:03 GMT</pubDate><content:encoded><![CDATA[<blockquote><a href="https://simonwillison.net/about/">Simon Willison</a> has a legendary throughput. No, seriously. Not only is he a co-creator of <a href="https://www.djangoproject.com/">Django</a>, he has been publishing interesting software (see <a href="https://datasette.io/">Datasette</a> and <a href="https://simonwillison.net/tags/datasette/">its gazillion plugins</a>) at an outstanding pace. More recently he has taken the task of making LLM&apos;s easy to interact from the CLI with its <code><a href="https://llm.datasette.io/en/stable/index.html">llm</a></code> program. In today&apos;s post, I write about my first real success with an LLM. I shall update my subtitle to &quot;He who prompted okay once&quot;.</blockquote><p>I am very cautious about LLM&apos;s in general. <a href="https://softwarecrisis.dev/letters/llmentalist/">It&apos;s not magic</a>. It&apos;s simply getting the most likely next token over and over again with a bit of randomness sprinkled on top. <em>(Feel free to shout at me on Mastodon if this is terribly wrong. Just be sure you&apos;re more right than I am, it&apos;s annoying to get yelled at for the wrong reason.)</em> I&apos;d like computers to help me more with some tasks I&apos;d rather not do, so I gave it a shot today.</p><p>&quot;What did you do?&quot; I hear you ask. <strong>I instructed an LLM to draft paragraphs for an upcoming conference presentation.</strong></p><hr><p>Let&apos;s not get crazy over here, give me the benefit of the doubt, will you? <a href="https://git.sr.ht/~docbibi/talks/tree/main/item/2024-EuroPython/README.md">I had to write an actual abstract and an outline for that talk.</a> No lying, it had to be genuine because who on Earth would want to read (and even more attend) a proposal written by a bot? I&apos;d certainly feel all sorts of negative emotions. But here, I don&apos;t feel bad feeding <em>my own writing</em> to a machine and see what comes out of it.</p><p>My grand plan is to write the talk (&quot;Event Sourcing in production&quot;) in full, make some blog posts out of that, and then distil it back into a slideshow for the conference. And of course, I am experiencing <em>writer&apos;s block</em>.</p><p>So I fired up <a href="https://llm.datasette.io/en/stable/usage.html#starting-an-interactive-chat">a chat session</a> with a local LLM (<a href="https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct">Meta Llama 3 8B</a>) and asked it to help out overcome the blank page syndrom. I had little expectations in terms of length and quality, and no fear of losing my soul given that I would rewrite the whole thing at least twice. Here is what I instructed the LLM with:</p><pre><code>!multi
Draft a few paragraphs for the following talk about &quot;Event Sourcing in production&quot;. The outline is:
1. The concepts (5 minutes)
   &#x21D2; Brief explanation and definition of event sourcing as well as the relevant parts of DDD and CQRS
2. Evolution (10 minutes)
   &#x21D2; Strategies to deal with changes in the domain models
3. Projections (_aka_ read models in CQRS) (10 minutes)
   &#x21D2; How to efficiently query your domain, also to support new requirements
4. Runtime (10 minutes)
   &#x21D2; Synchronous vs asynchronous requests, horizontal/vertical scaling
5. Tying up and sharing what we learnt (5 minutes)
   &#x21D2; References to companion examples and documentation to share our experience in patterns (this talk from another angle)
!end</code></pre><p>There were a few hiccups on the way. For instance <a href="https://freiburg.social/@docbibi/112333024564465181">I could only get so many characters after which the LLM would stop answering</a>, forcing me to instruct it to &quot;continue&quot; until it gave the full answer. When time came to expand on the specific Python library (<a href="https://eventsourcing.readthedocs.io/">eventsourcing</a>) in section 4, the LLM spat out platitudes about sync vs. async and scaling. Pretty much what I wrote in the outline but useless for me. &quot;Ah, right. I did not actually mention the library in the prompt. PEBKAC&quot;</p><p>I tried again with the fourth section, this time specifying to focus on &quot;the Python library <code>eventsourcing</code>&quot;. I did get more fluff with actual relevant bits. Unfortunately the library changed quite a lot in 2021 and that is not reflected in the LLM dataset. The text is now completely inacurrate.</p><p>I could go on with more prompts and refinements. Maybe try to retrieve fresher content from the library&apos;s current documentation. Yet, it does not matter here. I am not looking for a very precise and accurate answer, only for some breadcrumbs to avoid staring at a blank screen. And that, is a success.</p><hr><p>For good measure I ran the same script with ChatGPT 3.5 and also got the same useless fluff for the runtime section. Platitudes in &#x21D2; platitudes out. Not sure why I even bothered, my prompt is the problem in this case.</p><p>As a sidenote, all examples provided by the LLM were about order systems. That matches my own exposure to online &quot;litterature&quot; about event sourcing, lots of online store examples. <em>Here and now, I shall vow to use a different example myself.</em></p><p>My takeaway is that, yes indeed, LLMs are useful to summarise well-known and well-spread concepts and ideas. And yes, you still need to know something about the topic you ask about to spot the plain wrong answers.</p>]]></content:encoded></item><item><title><![CDATA[On Domain Events, English, and ubiquitous language]]></title><description><![CDATA[I attended a Python meetup last week. The main presentation was a showcase of an "Event System", or how they used messages to share customer data between their ERP and their CRM.
Eventually the presentation showed a few actual domain events they use in production. They had German names]]></description><link>https://steadymonkey.eu/on-domain-events-english-and-ubiquitous-language/</link><guid isPermaLink="false">661a2a3b5fb1b00001c5f884</guid><category><![CDATA[Thoughts]]></category><category><![CDATA[DomainDrivenDesign]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Wed, 17 Apr 2024 12:31:37 GMT</pubDate><content:encoded><![CDATA[<p>I attended a Python meetup last week, hosted by <a href="https://jobrad.org/">JobRad</a>. The main presentation was a showcase of an &quot;Event System&quot;, or how they used messages to share customer data between their ERP (<em>Enterprise Resource Planning</em>, the big database of their processes, inventory, and all other business activities) and their CRM (<em>Customer Relationship Management</em>, the main piece of software required by customer support with sales orders and support tickets).</p><p>I liked the presentation a lot, which isn&apos;t surprising given I spent the last five years head down in Domain Driven Design (DDD), message-driven architecture, and event-sourcing. Due to the audience variety &#x2014; it was a general Python meetup after all, not a specialised one &#x2014; the hosts gave us a good walkthrough with hints of advanced topics (especially domain model evolution and versioning).<em> As a sidenote, I will be talking about <a href="https://program.europython.eu/europython-2024/talk/review/HRKKC9AVJS8GNS8X9MHSFWKF9PHQEUWK">&quot;Event Sourcing in production&quot;</a> at <a href="https://ep2024.europython.eu/">EuroPython 2024</a> in July.</em></p><p>Eventually the presentation showed a few actual domain events they use in production. They had German names (ed. JobRad is a German company). The rationale shared with us is that those are the business terms as they are used by the stakeholders. They are directly taken from the ubiquitous language: said otherwise, they did not try to cater to their more international engineering team but sticked to the business processes.</p><p>After an initial surprise, I must say<em> I find this approach bold yet totally rational</em>. Let me explain.</p><p>JobRad is bigger than just Germany, at the very least Austria is already running, and I understood they were targetting other countries in the near future. In addition, their software engineering department grew quickly in the last couple of years and English is now apparently the primary working language for software folks. One could think the best approach would be to harmonise the codebase over English names throughout, from the code symbols to the developer documentation. <em>Making virtually every term understandable by every single programmer</em> (let&apos;s assume English is a requirement for that job), and hence expressing the business processes and intents in a common language.</p><p>(Un-)Fortunately, there is another shared language: the ubiquitous language. Nobody had to approximate translations for its terms. It is a gift by the stakeholders packed with history and meaning. Every term we come up with, as developers of the system, is bound to be an approximation. It is the (mental) model we make of the concepts we were told to work with, we interviewed people about, or simply read definitions somewhere. An abstraction is by definition less precise than the object it represents.<br>An additional piece of information was given during the Q&amp;A: the most important events are deeply related to the German tax system. They are not generalised tax events but really encode the legal process followed by the company.</p><p>Whatever the language these messages use, let&apos;s not forget that the transport mechanism is an event bus. Want an English version of the messages? Place a consumer that translates the concepts and forwards them onward. It&apos;s cheap enough to set up. In my experience, the maintenance headache comes from fitting new requirements and the natural evolution of one&apos;s understanding onto the codified concepts, not from a 1-1 mapping of a pre-existing concept.</p><p>In the spirit of DDD, let&apos;s agree to accept that the code we write is more than machine instructions. The evangelists told us to <em>live by</em> the ubiquitous language, and I think they had a good reason to.</p><hr><h3 id="on-the-fediverse%E2%80%A6">On the Fediverse&#x2026;</h3><!--kg-card-begin: html--><a class="mastodon-thread" href="https://freiburg.social/@docbibi" data-toot-id="112286733194538412">I advertised this post on Mastodon</a><!--kg-card-end: html-->]]></content:encoded></item><item><title><![CDATA[Exploring Mainboard housing v1 with cardboard]]></title><description><![CDATA[<p>Yesterday I played around with cardboard to have a better (physical) sense of the first housing version. In short, this housing will be the simplest I can build to fit the Mainboard and an Atreus keyboard. Nothing fancy, not even an internal routing of the USB cable. In the end</p>]]></description><link>https://steadymonkey.eu/exploring-mainboard-housing-v1-with-cardboard/</link><guid isPermaLink="false">629c9f87103b1a0001223917</guid><category><![CDATA[Mainboard]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Sun, 05 Jun 2022 13:02:14 GMT</pubDate><content:encoded><![CDATA[<p>Yesterday I played around with cardboard to have a better (physical) sense of the first housing version. In short, this housing will be the simplest I can build to fit the Mainboard and an Atreus keyboard. Nothing fancy, not even an internal routing of the USB cable. In the end I want to build momentum and, considering the blocks of time I can allocate to this project, I figured it would be best to use (very) small increments.</p><p>Laying out the Mainboard and the Atreus side-to-side on a piece of cardboard (cut to be as wide as the Atreus case is) really shows how similarly sized the two elements are. Let&apos;s cut another template for the Atreus&apos; PCB layer (the layer, either PCB or plywood, that holds the key switches) and fit them together.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/06/laying-out-mainboard-and-atreus.jpeg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/06/laying-out-mainboard-and-atreus.jpeg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/06/laying-out-mainboard-and-atreus.jpeg 1000w, https://steadymonkey.eu/content/images/2022/06/laying-out-mainboard-and-atreus.jpeg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Laying out the Mainboard and the Atreus on a piece of cardboard. (The cardboard is as wide as the Atreus case is.)</figcaption></figure><p>I came up with two possible designs to optimally fit the Mainboard (roughly 232&#xD7;104mm) and the PCB layer of the Atreus (roughly 226&#xD7;90mm in its rectangular form, otherwise the shorter side is down to 72mm). The first one (bottom in the following picture) is simply placing the keyboard on top of the mainboard, aligning them at the bottom. This really is the minimum form factor I can come up with right now (that is, without using a sturdier housing material to make the walls thinner). The second option is to keep the Atreus split angles and letting it slip past the Mainboard bottom side.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/06/optimally-fitting-both-mainboard-and-atreus-pcb.jpeg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/06/optimally-fitting-both-mainboard-and-atreus-pcb.jpeg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/06/optimally-fitting-both-mainboard-and-atreus-pcb.jpeg 1000w, https://steadymonkey.eu/content/images/2022/06/optimally-fitting-both-mainboard-and-atreus-pcb.jpeg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Optimally fitting the Mainboard (in green) and the Atreus PCB (in red), keeping 15mm of surrounding walls (in yellow).</figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/06/on-top-of-each-other.jpeg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/06/on-top-of-each-other.jpeg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/06/on-top-of-each-other.jpeg 1000w, https://steadymonkey.eu/content/images/2022/06/on-top-of-each-other.jpeg 1200w" sizes="(min-width: 720px) 720px"><figcaption>The two designs on top of each other. Only the bottom side differs.</figcaption></figure><p>Obviously the second is design is preferred because otherwise there would be a lot of &quot;blank&quot; housing on the left and right most side of the keyboard, denying the advantage the split angles the Atreus offers. The first design would be relevant for a plain (ortholinear) matrix-style keyboard. But I am fine making the housing slightly larger to keep the split angles.</p><p>To illustrate the size taken by the Atreus PCB layer, see the following picture. It would be the shape that encloses all key switches.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/06/carboard-and-pcb-layer.jpeg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/06/carboard-and-pcb-layer.jpeg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/06/carboard-and-pcb-layer.jpeg 1000w, https://steadymonkey.eu/content/images/2022/06/carboard-and-pcb-layer.jpeg 1200w" sizes="(min-width: 720px) 720px"><figcaption>The Atreus PCB layer vs. the cardboard pattern. I only consider the area needed for the key switches, not the space around them.</figcaption></figure><p>As can be seen on the following two pictures, the housing design is very close to the original Atreus footprint; I actually used the width of the Atreus as a guide here. The major difference is that the thickness will be approximately doubled.</p><figure class="kg-card kg-gallery-card kg-width-wide kg-card-hascaption"><div class="kg-gallery-container"><div class="kg-gallery-row"><div class="kg-gallery-image"><img src="https://steadymonkey.eu/content/images/2022/06/atreus-above-cardboard.jpeg" width="1200" height="900" loading="lazy" alt srcset="https://steadymonkey.eu/content/images/size/w600/2022/06/atreus-above-cardboard.jpeg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/06/atreus-above-cardboard.jpeg 1000w, https://steadymonkey.eu/content/images/2022/06/atreus-above-cardboard.jpeg 1200w" sizes="(min-width: 720px) 720px"></div><div class="kg-gallery-image"><img src="https://steadymonkey.eu/content/images/2022/06/atreus-above-cardboard-corner-zoom.jpeg" width="1200" height="900" loading="lazy" alt srcset="https://steadymonkey.eu/content/images/size/w600/2022/06/atreus-above-cardboard-corner-zoom.jpeg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/06/atreus-above-cardboard-corner-zoom.jpeg 1000w, https://steadymonkey.eu/content/images/2022/06/atreus-above-cardboard-corner-zoom.jpeg 1200w" sizes="(min-width: 720px) 720px"></div></div></div><figcaption>The Atreus on top of the cardboard design, they have the same width.</figcaption></figure>]]></content:encoded></item><item><title><![CDATA[The transportable Mainboard-based computer]]></title><description><![CDATA[<p>As I previously mentioned, my goal for the Framework Mainboard I will receive as part of the Mainboard Developer Program is twofold: build 1) a transportable computer that has 2) a better keyboard. The challenge is mainly about my own lack of experience as a maker. And that I don&</p>]]></description><link>https://steadymonkey.eu/the-transportable-mainboard-based-computer/</link><guid isPermaLink="false">6288f072103b1a0001223840</guid><category><![CDATA[Mainboard]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Sun, 29 May 2022 15:17:00 GMT</pubDate><content:encoded><![CDATA[<p>As I previously mentioned, my goal for the Framework Mainboard I will receive as part of the Mainboard Developer Program is twofold: build 1) a transportable computer that has 2) a better keyboard. The challenge is mainly about my own lack of experience as a maker. And that I don&apos;t want to use highly specialised equipment such as CNC machining or 3D printing, at least not for the first iterations.</p><p>To support my low-key approach, I plan on using thin plywood sheets cheaply sold in craft- or home improvement stores. In my European neighbourhood I can get four A3 sheets of 4mm poplar plywood for about &#x20AC;6. Then some paper, glue, and a printer to lay out the patterns; a wood knife, a coping saw, and some sand paper to model the plywood. That should do the trick. (Watch this blog to see what I end up doing when 90% of my assumptions prove wrong.)</p><p>I literally advertised my project as &quot;combin[ing] a mainboard with an <a href="https://atreus.technomancy.us">Atreus keyboard</a>. Not unlike computers of old. At home: USB-C dock, on the go: USB-C external monitor.&quot; Which means I need access to at least two USB-C ports, so that I can still plug a gadget on the go when the first USB-C port is handling power and display. (I know, I could also unplug the dock and bring it on the go. But <em>really</em>, who wants to have a single USB port on their machine?)</p><p>Keeping that in mind, the first viable iteration needs to fulfill the following criteriae:</p><ol><li>Standalone housing for the Mainboard and a mechanical keyboard on top.</li><li>At least two USB-C ports accessible externally. <em>Externally</em> in case the housing is large enough to encompass internal USB-C connections.</li><li>The upper face &#x2014;holding the keyboard&#x2014; should be modular. I want to be able to change it to e.g. allow for an alternative layout like QWERTY. That is the piece I think has the most chance to change over time. Because I might want to change the keyboard (I am very intrigued by <a href="https://github.com/manna-harbour/miryoku">Miryoku</a> which is quite close to Atreus).</li></ol>]]></content:encoded></item><item><title><![CDATA[I got in the Framework Mainboard Developer Program]]></title><description><![CDATA[<p>Two weeks ago, I received an e-mail telling me I had been accepted in <em>the Framework Mainboard Developer Program</em>. <a href="https://frame.work/">Framework</a> has a very interesting approach to sustainability in electronics that reminds me of Fairphone, though I don&apos;t want to compare them directly. I worked at Fairphone for more</p>]]></description><link>https://steadymonkey.eu/i-got-in-the-framework-mainboard-developer-program/</link><guid isPermaLink="false">6288e40e103b1a000122374b</guid><category><![CDATA[Thoughts]]></category><category><![CDATA[Mainboard]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Sat, 21 May 2022 13:58:09 GMT</pubDate><content:encoded><![CDATA[<p>Two weeks ago, I received an e-mail telling me I had been accepted in <em>the Framework Mainboard Developer Program</em>. <a href="https://frame.work/">Framework</a> has a very interesting approach to sustainability in electronics that reminds me of Fairphone, though I don&apos;t want to compare them directly. I worked at Fairphone for more than three years at the time of Fairphone 2, and the modular aspect of the phone was amazing. I have been following Framework since they launched a crowdfunding campaign for their first generation modular laptop, it&apos;s a really positive outcome that they are still there and made it to the second generation.</p><p>To be clear, and that argument held already for Fairphone, it&apos;s not about following the trends and getting updated hardware with better specs every (other) year that matters. But if we stay pragmatic, those players with a small ordering/manufacturing volume can simply not sustain electronic parts by themselves. They can only buy what&apos;s made (and kept) available by the bigger players. So yes, after a few years, chips will be end-of-life and you will need to change your blueprints to accomodate for replacement parts. And sometimes you won&apos;t find pin-to-pin compatibile chips, if they are even dimensionally compatible, and you will have to spend more engineering power on retro-fitting new components.</p><p>From a consumer perspective, I am happily using performant hardware from a few years ago without any problem. I don&apos;t <em>need</em> to upgrade. The only part that does not age well is the battery, but it usually can be found new from a third-party supplier.</p><p>Now, let&apos;s see how many times Framework will be able to upgrade their mainboard while maintening the chassis. I believe they came up with a good design leaving every &quot;stable component&quot; off the mainboard. Screens, keyboards, batteries, those things do not change really fast. Unlike CPU, storage, RAM, and other wireless cards. They should be able to keep the base as-is &#x2014;give or take a few refinements as they receive feedback&#x2014; for hopefully a few more generations.</p><p>After this long introduction, let&apos;s go back to the main topic. In April 2022, Framework launched a (community) developer program for their mainboard &quot;to accelerate the ecosystem of projects using Framework Laptop Mainboards&quot;. A month later, they followed suit by announcing their next mainboard generation. The acknowledged goal of the program is to foster many interesting ideas for people to re-use their mainboard when they decide to upgrade their own laptops. And not throw them away or leave them in a drawer. (Also, don&apos;t do that with your phones either. Donate or sell them, please. We have too much dormant electronic waste.)</p><p>My take on this program is to build <em>a transportable computer with a better keyboard</em>. Think early computers where the brain was in the same chassis than the input device. Though I am too young to have experienced that, the idea is quite appealing to me for a mainly sedentary computer. I will distinguish myself from the many similar projects (<a href="https://www.youtube.com/watch?v=y8jiYl0CzKc">that</a> <a href="https://github.com/penk/MainboardTerminal">look</a> <a href="https://github.com/brickbots/framedeck">awesome</a>; and all feature mechanical keyboards) with a more low-key approach: <em>think DIY from your apartment without a workshop</em>. I do not have a 3D printer. I do not know how to use a CAD software. I do not know how to do mechanical engineering. But. I am a serial dreamer. I am having fun. I want to build something accessible (by necessity, but also by choice).</p><p>It&apos;s going to be rough. It&apos;s going to be amateuristic. And that&apos;s fine.</p>]]></content:encoded></item><item><title><![CDATA[The cautionary nightmare]]></title><description><![CDATA[<p>I had a dream. Rather, I had a nightmare last night. It went as dreams go, mixing reality and fantasy. When I awoke, completely stressed out for the day before morning light could stream through my window, I decided I would not let the dream happen. Here is the gist.</p>]]></description><link>https://steadymonkey.eu/the-cautionary-nightnare/</link><guid isPermaLink="false">61b07323b1bb1d00014fd933</guid><category><![CDATA[Homelab]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Wed, 08 Dec 2021 09:38:15 GMT</pubDate><content:encoded><![CDATA[<p>I had a dream. Rather, I had a nightmare last night. It went as dreams go, mixing reality and fantasy. When I awoke, completely stressed out for the day before morning light could stream through my window, I decided I would not let the dream happen. Here is the gist.</p><p>In that dream, my brand new laptop that I left in the car was stolen. Actually the car itself was stolen, but found later with only the laptop missing. The laptop sleeve was still in the car, though. Clearly that was the first sign this was ridiculous: who would take the time to take the laptop of its protection sleeve before stealing it? Anyway, my laptop is a few years old and I don&apos;t even own a car. Details.</p><p>I got home, frustrated that I lost this new piece of equipment. In the end, it&apos;s only material and that&apos;s a problem money can fix. We will live on. Only to discover that my tower computer was gone too! Arg, thieves broke in the flat and extracted that one piece of hardware. Bad luck, for real. Those sweet SSD and NVMe drives are gone. But, in the end, they were encyrpted and so it&apos;s only a matter of replacing the hardware.</p><p>Now, I was not alarmed beyond measure because I have a (almost) solid back-up plan. That laptop and that tower computer were primary sources of data, their full states backed up to the NAS. So all my data is fine, I thought, proud of myself. I only went to my &quot;office&quot; to discover the NAS was also missing. No way! What kind of bad day can this be? Besides the fact it was yet again more money that evaporated, it can be &quot;easily&quot; replaced with an equivalent off the shelf, this time <em>my whole data was out there</em>.</p><p>I still had my last line of defense in the name of offsite back-ups: the most important data was recoverable, I only lost what I deemed expendable. No, the actual problem was that the NAS is holding raw data. Whatever lands there unencrypted stays there unencrypted. And I feel <em>very</em> uncomfortable with the idea of my whole life being completely exposed. Not that I deal in top secret projects, nor hoard sensitive information. It&apos;s just my private life. I am not wiring public CCTV in my homer for the same reason, it&apos;s my own life and my own affair.</p><p>All of this prose to come to the following points. First, I am confident in my back-up strategy whether my flat burns down or all my hardware gets stolen. What data really matters is also stored elsewhere, I can recover. Second, I am <em>not</em> satisfied with how my data is stored at rest on the NAS. Both primary and ternary data sources are encrypted (computers are using either full disk encryption or logical partition encryption; offsite back-ups are encrypted before leaving my NAS) while the data hoarding source that is my NAS is <em>removing</em> the encryption layer from the primary sources that get synchronised. The data is kept in sync at a file-level, not block-level, so the file-system/partition encryption of the source simply does not apply to the replicate.</p><p>I will have to sacrifice performance for privacy since the NAS does not offer much hardware acceleration in the cryptography area. But again, the trade-off seems acceptable because I am not hoarding files for the sake of archiving. My daily computer back-ups will end up on an encrypted ZFS dataset. That way I can still benefit from the features offered by ZFS (which is why I am pushing files and not blocks in the first place) while resting easy about my private data. The largest files on the NAS (media files) are not backed up because I don&apos;t deem them very important, so I also won&apos;t go through the hassle of encrypting them.</p>]]></content:encoded></item><item><title><![CDATA[More adventures with the NAS]]></title><description><![CDATA[About ten days ago, I received a scary e-mail from the NAS (it has a name by the way, it's called cactus): my boot pool was degraded but still operational. The SSD I added not so long ago to mirror the USB drive actually started to fail.]]></description><link>https://steadymonkey.eu/more-adventures-with-the-nas/</link><guid isPermaLink="false">6194dddcb411d30001345ae4</guid><category><![CDATA[Homelab]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Wed, 17 Nov 2021 11:14:29 GMT</pubDate><content:encoded><![CDATA[<p>About ten days ago, I received a scary e-mail from the NAS (it has a name by the way, it&apos;s called <em>cactus</em>): my boot pool was degraded but still operational. The SSD I added not so long ago to mirror the USB drive actually started to fail. TrueNAS detected slow read performance, and eventually detached the drive from the pool of its own accord. Smarty pants.</p><p>I was certainly not expecting the SSD to fail before the USB drive (they were roughly as old), especially given that the SSD did not see much wear and that it was stored in an ESD-safe bag together with a desiccant bag.</p><p>I ordered two more SSD drives to replace the current USB drive &#xA0;and the failed SSD, with the intent of switching to a full SSD mirrored boot pool. I also got a USB-to-SATA converter to connect one of the drives to the internal USB port currently used by the USB drive since I only have access to one internal SATA port (remember, the one for the ODD).</p><p>The plan was simple: connect one SSD first to the SATA port, attach it to the boot pool, let the system resilver the pool, detach the USB stick, power-off, swap the USB stick with the second SSD thanks to the USB-SATA adapter, boot on the first SSD, and do the attach-and-resilver dance once more with the second SSD. It should have been a fairly easy and painless process according to the documentation and online discussions. Except that it was not.</p><p>The first problem I encountered was of a surprising nature. Trying to attach the SSD to the boot pool gave the unhelpful error of &quot;can only attach to mirrors and top-level disks&quot;. This is a known UX problem where a few type of errors are aggregated into this high-level exception thrown by TrueNAS&apos; middleware. It is apparently quite common to see this when the block size of the pool and additional disk cannot match. I suspect the initial boot pool was created with a too-small block size (think 512 bytes) while now the recommendation is to go with 4 kilobytes by default. And since the new SSDs have indeed 4k block size, I cannot mix and match them in the existing pool. I did try to make it work for a couple of hours but eventually decided that my mastery level was too low to risk the NAS setup and the time investment needed not worth it. <em>(Not that I would have had the time anyway.)</em></p><p>After reading extensively on how to migrate the TrueNAS boot drive to another medium, I jumped on the fresh install bandwagon. I installed the version I was currently running on the USB stick on the SSD, booted, imported the configuration, and done. It was really simple and it definitely took me longer to read about the procedure (a case of cold feet) than to execute it.</p><p>Now, the idea was to keep a mirror of the boot pool. I wanted to part ways with the USB stick for good and simply use two SSDs. Strangely enough, the second SSD via USB stopped working the moment I installed it inside the NAS. (I did run a couple of tests outside the NAS first, using the external USB ports.) The kernel reported I/O errors and simply backed away from the construct. But only on FreeBSD, I could use the SSD on a GNU/Linux machine without issues.</p><p>This time around, I did not spend too long thinking about the solution: the adapter goes back as DOA and I simply don&apos;t mirror the boot pool. <em>Replacing the boot drive is so easy</em> that I am not afraid of the next failure. I have only so much time to debug weird hardware problems. So for now the USB stick remains plugged in, but as a backup boot disk (it is not part of the running boot pool) &#x2014; that way there is no write on it until the day I need to rescue the system and use it as the boot drive.</p>]]></content:encoded></item><item><title><![CDATA[Upgrading my NAS to TrueNAS Core]]></title><description><![CDATA[<p>Over the course of the week-end, I (finally) upgraded from FreeNAS 11.3 to TrueNAS Core 12.0.</p><p>One of the most notable things with the new version is that it is strongly discouraged to use a USB stick as boot drive. Since my NAS has an internal USB port</p>]]></description><link>https://steadymonkey.eu/upgrading-my-nas-to-truenas-core/</link><guid isPermaLink="false">6175c0545908100001910bab</guid><category><![CDATA[Homelab]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Sun, 24 Oct 2021 19:23:26 GMT</pubDate><content:encoded><![CDATA[<p>Over the course of the week-end, I (finally) upgraded from FreeNAS 11.3 to TrueNAS Core 12.0.</p><p>One of the most notable things with the new version is that it is strongly discouraged to use a USB stick as boot drive. Since my NAS has an internal USB port for a boot stick, it is of course what I have been using since the beginning: a very small SanDisk Cruzer Fit of 16GB. Good opportunity to use that old (but unused) Intel SSD of 40GB that has been forgotten in the unnamed box of electronics.</p><p>My initial thought was to unplug everything from the motherboard, the data hard drives, the boot USB stick, the ethernet cable, and install TrueNAS on the SSD. Not only is that a bit on the paranoid side, it is also completely unnecessary. It turns out plugging in the SSD and adding it to the ZFS boot pool was enough to seamlessly upgrade my boot storage to a two-disk mirror. As a side-effect, my boot pool is limited by the smaller disk but I now have a <em>mirrored</em> boot pool. Yay for redundancy. 16GB is enough for now anyway, the main disk space use is on OS upgrade to create a new boot environment. That does not happen so often to me (sic).</p><p>It is worth noting that the NAS do have a fifth SATA port, for the optional ODD (Optical Disk Drive). I decided to flash the BIOS with a well-known community mod to allow disabling the IDE mode on this fifth port, thus allowing the full SATA-3Gbps bandwidth.</p><p>If the USB stick comes to fail, I will still be able to boot the NAS from the SSD (which is the boot drive anyway). When that happens, I might get a USB-to-SATA adapter and fit another small SSD somewhere in the NAS enclosure to keep the mirrored boot pool.</p><p>Back to the upgrade: booting off a USB stick with TrueNAS Core 12.0 and selecting the &quot;upgrade&quot; process went as smooth as can be expected. And&#x2026; that&apos;s it, the NAS is up-to-date now. I am still impressed by how little maintenance is actually needed for FreeNAS/TrueNAS. Setting things up do take some time, though.</p>]]></content:encoded></item><item><title><![CDATA[Refreshing my NAS configuration]]></title><description><![CDATA[<p>I setup my Network Attached Storage (NAS) back in 2014 after getting a nice discount on a HP MicroServer of the previous generation. I added some more ECC RAM, fitted four hard drives, installed FreeNAS, and then happily used it to offload my poor computers of all the media and</p>]]></description><link>https://steadymonkey.eu/refreshing-my-nas-configuration/</link><guid isPermaLink="false">6175c0545908100001910baa</guid><category><![CDATA[Homelab]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Sat, 28 Aug 2021 20:47:14 GMT</pubDate><content:encoded><![CDATA[<p>I setup my Network Attached Storage (NAS) back in 2014 after getting a nice discount on a HP MicroServer of the previous generation. I added some more ECC RAM, fitted four hard drives, installed FreeNAS, and then happily used it to offload my poor computers of all the media and random stuff I had lying around there. When I moved out of the country in 2015, I packed light and left the NAS behind. Until 2021.</p><p>The 2TB hard drives are not so big by today&apos;s standards but I am happy with the 3.4TB total storage space for now (the hard drives are setup in a RAID-Z2 array, allowing me to lose two drives out of four). Of course if I lose a drive, chances are the others will fail soon too. Maybe even during the resilvering (rebuilding the RAID after replacing the faulty drive). <em>A RAID array is not a backup.</em> I read multiple times that 6 drives would give the best trade-off with RAID-Z2, but unless I fit two more 3.5&quot; hard drives in that small space (it&apos;s not hot in there, but the fans and drives are too loud already), it&apos;s not going to happen any time soon.</p><p>I did a few routine maintenance updates of FreeNAS itself, but I am still lagging behind on an unsupported version. The latest version is not even called FreeNAS anymore, it&apos;s <a href="https://www.truenas.com/truenas-core/">TrueNAS CORE</a> now. Though I have to say that after the initial setup, I simply forgot about it and simply used the NFS shares for a bit. It just worked.</p><p>When I configured FreeNAS in 2014, I had no idea about how many datasets I should create and how I should split my data. I simply went with <em>documents</em> (to store my home dirs), <em>media</em> (music, movies, and the like), and <em>raw</em> (everything else that was not nicely sorted such as mirrors of external drives and copies of old (internal) drives before disposing of the hosts).</p><p>I won&apos;t lie, I am still a neophyte when it comes to handling FreeBSD (e.g. the jails) and configuring it. Last week I managed to mess up all file permissions of one of my datasets. Thankfully it was my home dirs mirror, so it does not matter if I blindly reset the permissions to <code>u+rwX,go=</code>. I also realised that I was naive enough to store my NAS user account on that same dataset. So when I reset the permissions, I also set the wrong bits for the SSH configuration and could not login anymore. It took me a shamefully long time to realise why I could not remotely log-in. I finally solved my problem with the help of the console in the FreeNAS UI: one call to <code>chmod</code> later and I could log-in again.</p><p>Here is the new scheme I came up with:</p><ul><li><code>home</code>: simply the home directories of the NAS accounts; I don&apos;t want to stupidly break my SSH configuration anymore</li><li><code>dione</code>, <code>iapetus</code>, &#x2026;: mirrors of the data stored on my everyday computers</li><li><code>media</code>: original dataset for multimedia files &#x2013; still a good idea</li><li><code>raw</code>: original staging dataset of files I am supposed to review and categorise &#x2013; only relevant if I <em>actually</em> move things out of it, otherwise I should rename it to <code>dumpster</code></li></ul><p>The idea of mirroring data from my computers is that I can leverage ZFS snapshots directly on the NAS and not handle a more-or-less complicated, and more-or-less very slow incremental local backup process. I do not work with really big files on my computers. The only time I access big multimedia files is when I travel and I want a local cache of movies/series. I am fine <code>rsync</code>-ing a subset of my filesystem over the wire to the NAS every day.</p><p>I thought that it would be really nice to be able to browse through the snapshots in a user-friendly manner, for instance if I want to restore an older version of a file. After a few days of leaving that train of thoughts on the back-burner, I came to the conclusion that I actually do not need that feature. I don&apos;t care about selective restoration. I don&apos;t need a time machine for individual files because if I do, then I use a version control system (e.g. Git). I imagine that the only times I would need to restore a snapshot are if I have a hardware failure, and if my files end up encrypted by some external entity asking me to pay them in cryptocurrency in exchange for the decryption key. In both cases I can take the time to navigate through manually cloning the snapshots in question and promoting it or restoring from it.</p><p>Next up: switching from <code>D&#xE9;j&#xE0;Dup</code> against Google Drive to <code>rsync</code> to the NAS.</p>]]></content:encoded></item><item><title><![CDATA[Atreus build part 5: Adding external access to the reset pin]]></title><description><![CDATA[<p><em>This post belongs to the </em>Atreus build series<em>, which was introduced by </em><a href="https://steadymonkey.eu/onward-with-the-atreus-keyboard/">Onward with the Atreus keyboard</a>.</p><p>The advantage of building your own mechanical keyboard is that you get to choose the software to run on it. The problem is that you need to place the controller in &quot;flashing</p>]]></description><link>https://steadymonkey.eu/atreus-build-part-5/</link><guid isPermaLink="false">6266f2375112250001f12249</guid><category><![CDATA[Atreus]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Wed, 24 Jun 2020 08:16:00 GMT</pubDate><content:encoded><![CDATA[<p><em>This post belongs to the </em>Atreus build series<em>, which was introduced by </em><a href="https://steadymonkey.eu/onward-with-the-atreus-keyboard/">Onward with the Atreus keyboard</a>.</p><p>The advantage of building your own mechanical keyboard is that you get to choose the software to run on it. The problem is that you need to place the controller in &quot;flashing mode&quot; to do just that.</p><p>I learnt my mistake and decided to give myself an easier time to play with the keyboard software and give me better access to the reset pin of the Pro Micro.</p><p>I am simply going to expose the upper part of two pins from a plain old header bar which I will solder to the reset and ground pins of the Pro Micro. Then I simply have to short these pins to &quot;hold&quot; reset. A small screwdriver will provide conductivity and reach whenever the need arises.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-reset-pin-01.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-reset-pin-01.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-reset-pin-01.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-reset-pin-01.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Marking where I need to drill on the second layer to open up under the &quot;a&quot; of Atreus. The bolts are simply going through both layers to align them together.</figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-reset-pin-02.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-reset-pin-02.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-reset-pin-02.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-reset-pin-02.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>The hole appears right below the USB-C breakout board and is big enough to fit both pins.</figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-reset-pin-03.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-reset-pin-03.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-reset-pin-03.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-reset-pin-03.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>The reset pins soldered to RST and GND on the Pro Micro. (Note the last minute hand colouring of the wires to distinguish them from the ones used in the switches matrix.)</figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-reset-pin-04.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-reset-pin-04.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-reset-pin-04.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-reset-pin-04.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Hitting reset on the Pro Micro gets easier: short the two pins in the &quot;a&quot;.</figcaption></figure>]]></content:encoded></item><item><title><![CDATA[Atreus build part 4: Wiring the USB-C breakout board]]></title><description><![CDATA[<p><em>This post belongs to the </em>Atreus build series<em>, which was introduced by </em><a href="https://steadymonkey.eu/onward-with-the-atreus-keyboard/">Onward with the Atreus keyboard</a>.</p><p>The breakout board will give a USB-C socket to the Atreus, much nicer to use than an old &#x2014;though still omnipresent&#x2014; micro-B socket. The breakout board I am using (from Adafruit)</p>]]></description><link>https://steadymonkey.eu/atreus-build-part-4-the-usb-c-breakout-board/</link><guid isPermaLink="false">6266ed595112250001f121e0</guid><category><![CDATA[Atreus]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Fri, 22 May 2020 10:46:00 GMT</pubDate><content:encoded><![CDATA[<p><em>This post belongs to the </em>Atreus build series<em>, which was introduced by </em><a href="https://steadymonkey.eu/onward-with-the-atreus-keyboard/">Onward with the Atreus keyboard</a>.</p><p>The breakout board will give a USB-C socket to the Atreus, much nicer to use than an old &#x2014;though still omnipresent&#x2014; micro-B socket. The breakout board I am using (from Adafruit) takes care of preparing the signals to force the USB-C end as a downstream device through a set of properly placed resistors. (Downstream devices means it must be connected to a host device, it cannot function on its own or be a host itself.)</p><p>All that is left for me to do is to rip a USB cable with a micro-B plug end that will connect the breakout board to the Pro Micro controller. And be mindful of the connector enclosure thickness as it must fit inside the casing, which in my case gives me 6 millimetres clearance.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-breakout-board-01.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-breakout-board-01.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-breakout-board-01.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-breakout-board-01.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Soldering the four wires of USB 2.0, those wires are thin and I cut them quite short.</figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-breakout-board-02.jpg" class="kg-image" alt loading="lazy"><figcaption>USB-C breakout board (socket) soldered to USB micro-B plug.</figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-breakout-board-04.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-breakout-board-04.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-breakout-board-04.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-breakout-board-04.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>The USB-C board and socket fit nicely thanks to a couple of nuts. Considering the materials (wood does flex) and the operator&apos;s skills, it&apos;s as close to perfect as it can be. The outmost external nuts are holding the layers temporarily for the photo shoot.</figcaption></figure><p>Once that is done, the micro-B plug can be connected to the Pro Micro and the casing assembled.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-breakout-board-12.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-breakout-board-12.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-breakout-board-12.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-breakout-board-12.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>The keyboard fully assembled, with keycaps on.</figcaption></figure><p><strong>Edit:</strong> And a picture of the how the breakout board is tightly fitting at the edge of the casing. This gives a bit more perspective as to why the USB plug wires were cut so short.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-breakout-board-13.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-breakout-board-13.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-breakout-board-13.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-breakout-board-13.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Upside-down, bottom-up, view of the USB-C breakout board connected to the Pro Micro.</figcaption></figure>]]></content:encoded></item><item><title><![CDATA[Atreus build part 3: Wiring up the switches]]></title><description><![CDATA[<p><em>This post belongs to the </em>Atreus build series<em>, which was introduced by </em><a href="https://steadymonkey.eu/onward-with-the-atreus-keyboard/">Onward with the Atreus keyboard</a>.</p><p>Last night I started soldering the rows and columns. The rows are connected by diodes (to avoid a bounce back effect from residual current on key up) while the columns are simply wired</p>]]></description><link>https://steadymonkey.eu/atreus-build-part-3-wiring-up-the-switches/</link><guid isPermaLink="false">626056e46d50b20001e659b0</guid><category><![CDATA[Atreus]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Fri, 22 May 2020 09:55:00 GMT</pubDate><content:encoded><![CDATA[<p><em>This post belongs to the </em>Atreus build series<em>, which was introduced by </em><a href="https://steadymonkey.eu/onward-with-the-atreus-keyboard/">Onward with the Atreus keyboard</a>.</p><p>Last night I started soldering the rows and columns. The rows are connected by diodes (to avoid a bounce back effect from residual current on key up) while the columns are simply wired together. This multiplexing allows us to only need as many digital inputs as there are columns and rows (11 + 4, the middle thumb keys are in a column of their own).</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-00.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-00.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-00.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-00.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Soldering the diodes to the left pin and connecting them in parallel(!), row by row.</figcaption></figure><p>I wanted to have an easy time (visually) tracing the columns so I mirrored the wire colours along the vertical middle axis. Satisfying to look at.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-03.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-03.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-03.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-03.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Each column connects four switches together, by their right pin. The inner most column only has two switches in it.</figcaption></figure><p>Once all the switches are wired and ready to be connected to the micr-controller, I <em>really </em>realised how a tight fit it would be. Best to wire the Pro Micro upfront to then solder the long loose wires to the rows and columns.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-05.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-05.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-05.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-05.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Each digital input/output is soldered to a piece of wire before hand.</figcaption></figure><p>To keep the standard mapping of columns to digital I/O expected by the firmware, I used the same colour coding for the loose wires. Then it&apos;s simply about soldering wires by colour.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-06.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-06.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-06.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-06.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Getting ready to solder all rows and columns to the micro-controller.</figcaption></figure><p>I finished soldering early morning and then went to bed, satisfied with my good work (or so I thought). I was surprised to realise only half of the keyboard was registering key presses this morning. I forgot to connect both ends of each row, duh.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-08.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-wire-up-08.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-wire-up-08.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-wire-up-08.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Final look after soldering the micro-controller. The micro-controller is only secured with the soldered wires, no additional hot glue. The USB-C breakout board will come next.</figcaption></figure><p>I now have a fully functional 42-key keyboard! But it&apos;s connected with a non-detachable (because inside the case) micro-B USB cable. Next up: soldering the USB-C breakout board to a loose male micro-B cable and fitting it in the case.</p>]]></content:encoded></item><item><title><![CDATA[Atreus build part 2: Glueing the switches]]></title><description><![CDATA[<p><em>This post belongs to the </em>Atreus build series<em>, which was introduced by </em><a href="https://steadymonkey.eu/onward-with-the-atreus-keyboard/">Onward with the Atreus keyboard</a>.</p><p>Today I glued the switches on the base plate (the layer that holds them, commonly made of metal to avoid cave-in when typing energetically). It turned out to be more cumbersome than anticipated.</p>]]></description><link>https://steadymonkey.eu/atreus-build-part-2-glueing-the-switches/</link><guid isPermaLink="false">626058356d50b20001e659c7</guid><category><![CDATA[Atreus]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Wed, 20 May 2020 18:26:00 GMT</pubDate><content:encoded><![CDATA[<p><em>This post belongs to the </em>Atreus build series<em>, which was introduced by </em><a href="https://steadymonkey.eu/onward-with-the-atreus-keyboard/">Onward with the Atreus keyboard</a>.</p><p>Today I glued the switches on the base plate (the layer that holds them, commonly made of metal to avoid cave-in when typing energetically). It turned out to be more cumbersome than anticipated. Especially if you glue up the switches in the wrong direction&#x2026;</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-glue-up-00.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-glue-up-00.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-glue-up-00.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-glue-up-00.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>All switches glued on the base plate (viewed from under) holding the switches. Switches with a black underside are Gateron Brown while the Kailh Pro Burgundy have a white underside.</figcaption></figure><p>Once all the switches were glued up, I decided to make sure they were all working correctly. Just in case QA let something slipped under their radar. (Or if I broke one with my inexperienced handling.) I flashed <a href="https://qmk.fm/">QMK</a> (there is direct support for <a href="https://github.com/qmk/qmk_firmware/tree/master/keyboards/atreus/promicro">the Atreus Pro Micro</a>) to the Pro Micro and soldered two wires. Then I plugged it in my computer, and started a keyboard testing tool (<a href="https://config.qmk.fm/#/test/">QMK has a nice page</a> showing exactly which (combination of) key gets pressed; but any text input such as a text editor or terminal would have worked as long as the wires are shorting a pin mapped to a letter).</p><p>I held the dangling wires to each pair of switch pins while pressing the whole plate down on the table. Don&apos;t judge me, it worked fine.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-glue-up-01.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-glue-up-01.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-glue-up-01.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-glue-up-01.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Each switch was tested individually.</figcaption></figure>]]></content:encoded></item><item><title><![CDATA[Atreus build part 1: Dry fitting the keyboard parts]]></title><description><![CDATA[<p><em>This post begins the </em>Atreus build series<em>, which was introduced by </em><a href="https://steadymonkey.eu/onward-with-the-atreus-keyboard/">Onward with the Atreus keyboard</a>.</p><p>I received the laser-cut sheet of plywood yesterday. This time I will let pictures speak for themselves.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-00.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-dry-fitting-00.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-dry-fitting-00.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-00.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Laser-cut plywood sheet of the individual Atreus casing elements.</figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-05.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-dry-fitting-05.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-dry-fitting-05.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-05.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Individual casing elements, lightly sanded and coated with</figcaption></figure>]]></description><link>https://steadymonkey.eu/atreus-build-part-1-dry-fitting-the-keyboard-parts/</link><guid isPermaLink="false">626017a96d50b20001e65956</guid><category><![CDATA[Atreus]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Sat, 16 May 2020 21:01:00 GMT</pubDate><content:encoded><![CDATA[<p><em>This post begins the </em>Atreus build series<em>, which was introduced by </em><a href="https://steadymonkey.eu/onward-with-the-atreus-keyboard/">Onward with the Atreus keyboard</a>.</p><p>I received the laser-cut sheet of plywood yesterday. This time I will let pictures speak for themselves.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-00.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-dry-fitting-00.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-dry-fitting-00.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-00.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Laser-cut plywood sheet of the individual Atreus casing elements.</figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-05.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-dry-fitting-05.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-dry-fitting-05.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-05.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Individual casing elements, lightly sanded and coated with beeswax. The two additional spacers at the bottom are spares.</figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-03-1.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-dry-fitting-03-1.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-dry-fitting-03-1.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-03-1.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Close-up of the casing layers, from top (foreground) to bottom (background).</figcaption></figure><figure class="kg-card kg-gallery-card kg-width-wide kg-card-hascaption"><div class="kg-gallery-container"><div class="kg-gallery-row"><div class="kg-gallery-image"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-08.jpg" width="1200" height="900" loading="lazy" alt srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-dry-fitting-08.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-dry-fitting-08.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-08.jpg 1200w" sizes="(min-width: 720px) 720px"></div><div class="kg-gallery-image"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-06.jpg" width="1200" height="900" loading="lazy" alt srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-dry-fitting-06.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-dry-fitting-06.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-06.jpg 1200w" sizes="(min-width: 720px) 720px"></div></div></div><figcaption>Dry fitting the casing with key switches and breakout board.</figcaption></figure><p>Note the short clearance under the key switches pins, there isn&apos;t much space for wiring under the switches, it will have to be done alongside the switch pins. That is, I could use one or two of the additional spacers I could fit on the plywood sheet but I will try to keep the casing as thin as possible.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-09.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-dry-fitting-09.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-dry-fitting-09.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-09.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>The clearance under the key switches is rather short when using two spacers (3mm each).</figcaption></figure><p>I am very happy with my change to the spacers to accommodate for the USB-C breakout board, it looks good with the snug fit and rounder corners.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-11-1.jpg" class="kg-image" alt loading="lazy" width="1200" height="900" srcset="https://steadymonkey.eu/content/images/size/w600/2022/04/atreus-dry-fitting-11-1.jpg 600w, https://steadymonkey.eu/content/images/size/w1000/2022/04/atreus-dry-fitting-11-1.jpg 1000w, https://steadymonkey.eu/content/images/2022/04/atreus-dry-fitting-11-1.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>The spacers differ from the original Atreus to leave enough room for the USB-C breakout board.</figcaption></figure><p>Next step: glueing the key switches and wiring things up.</p>]]></content:encoded></item><item><title><![CDATA[Onward with the Atreus keyboard]]></title><description><![CDATA[<p>In the last few months, on a quest to find a better keyboard, I&apos;ve become totally engrossed with the <a href="https://atreus.technomancy.us/">Atreus keyboard</a>, a 42-key mechanical keyboard you can build yourself. Two weeks ago, I placed an order for <a href="https://shop.keyboard.io/products/keyboardio-atreus">the Keyboard.io Atreus</a>, which features two more keys and will</p>]]></description><link>https://steadymonkey.eu/onward-with-the-atreus-keyboard/</link><guid isPermaLink="false">625ff5846d50b20001e6585d</guid><category><![CDATA[Atreus]]></category><dc:creator><![CDATA[Borjan Tchakaloff]]></dc:creator><pubDate>Mon, 11 May 2020 13:07:00 GMT</pubDate><content:encoded><![CDATA[<p>In the last few months, on a quest to find a better keyboard, I&apos;ve become totally engrossed with the <a href="https://atreus.technomancy.us/">Atreus keyboard</a>, a 42-key mechanical keyboard you can build yourself. Two weeks ago, I placed an order for <a href="https://shop.keyboard.io/products/keyboardio-atreus">the Keyboard.io Atreus</a>, which features two more keys and will be manufactured out of metal and plastic. But I am way too excited to wait for another three months until the estimated delivery date. I will build my own Atreus keyboard in the mean time.</p><p>It all started with QWERTY and my poor touch touping. I use only a few fingers (mainly the index and thumb) and my hands are complaining after long keyboard sessions (i.e. kind of every day at the end of my work day). That&apos;s a known problem with QWERTY, it simply is a bad layout for modern hardware.</p><p>Exploring alternative keyboard layouts will invariably expose you to switching keyboard <em>shape</em> as well: ortholinear, &quot;ergonomic&quot;, split, and other niche form factors. And what about the tactile feedback? Most of the less widespread keyboards are mechanical, and I have to admit I too prefer the feeling of mechanical switches than of rubber dome.</p><p>Why switching from 100-ish keys to only so few? I mainly use the alpha-numeric keys, some modifier keys, and special keys (arrows, home, end, etc.). I basically don&apos;t use function keys nor the keypad at all. (Unless I am on Windows, which does not happen very often.) And since a key can fulfil multiple roles based on what &quot;layer&quot; is active (i.e. caps lock) or what modifier key is actively pressed at the same time, it should not be a problem to adapt to more roles instead of more hand movements.</p><p>I like the Atreus overall shape, tiny footprint, and open-ness. I feel like 42 keys ought to be enough, is it even too many keys?</p><p>My plan is to build a regular Atreus but I want a USB-C connector. USB micro-B and mini-B are things of the past. (I am being dramatic here, my point is that I am tired of needing three attempts to connect a USB cable.) Due to the low availability of USB-C keyboard controllers &#x2013;or expensive shipping fees&#x2013;, I ordered a classic (Arduino-ish) Pro Micro controller which I will pair to <a href="https://www.adafruit.com/product/4090">a simple USB-C breakout board from Adafruit</a>, inside the keyboard casing. I also ordered some Gateron Brown switches (i.e. Cherry MX brown -ish) and some Kailh Pro Burgundy switches (i.e. Cherry MX red -ish) for the modifier keys (keys meant to be held don&apos;t need tactile feedback).</p><p>Today, I ordered the laser-cut pieces of the keyboard body from a local shop. I did <a href="https://github.com/bibz/atreus/commit/3625c73b4adb9e245375f933fccaffe4bfa8646c">slightly change the case</a> to fit extra screws for the breakout board. And fit everything on a single sheet of plywood to optimise waste/reduce cost. This is really happening!</p>]]></content:encoded></item></channel></rss>